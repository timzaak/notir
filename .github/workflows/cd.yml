name: cd
on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  PROJECT_NAME: desktop-message # Define project name for binaries

jobs:
  build_binaries:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: desktop-message
            archive_ext: .tar.gz
          - name: macos-x86_64
            os: macos-13 # Intel macOS
            target: x86_64-apple-darwin
            bin_name: desktop-message
            archive_ext: .tar.gz
          - name: macos-aarch64
            os: macos-latest # ARM macOS
            target: aarch64-apple-darwin
            bin_name: desktop-message
            archive_ext: .tar.gz
          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: desktop-message.exe
            archive_ext: .zip
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TERM_COLOR: always

      - name: Prepare artifact details
        id: artifact_details
        shell: bash
        run: |
          echo "EXECUTABLE_PATH=target/${{ matrix.target }}/release/${{ matrix.bin_name }}" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=${{ env.PROJECT_NAME }}-${{ matrix.name }}${{ matrix.archive_ext }}" >> $GITHUB_ENV

      - name: Create archive
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            powershell Compress-Archive -Path "${{ env.EXECUTABLE_PATH }}" -DestinationPath "${{ env.ARCHIVE_NAME }}"
          else
            tar czvf "${{ env.ARCHIVE_NAME }}" -C "target/${{ matrix.target }}/release" "${{ matrix.bin_name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.name }}
          path: ${{ env.ARCHIVE_NAME }}

  release_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get the version from the tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.VERSION }}

  release_binaries:
    name: Release binaries
    runs-on: ubuntu-latest
    needs: build_binaries
    permissions:
      contents: write # Required to create releases and upload assets
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-* # Download all artifacts starting with binary-
          path: dist-binaries # Download to this directory

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: dist-binaries/*/* # Upload all files from all subdirectories in dist-binaries
          # The body of the release will be automatically generated by default,
          # or you can specify a body or body_path.
          # body_path: CHANGELOG.md # Example: if you have a changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
